<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--客户映射 指定到dao接口 -->
<mapper namespace="com.park.ssm.dao.AccountDao">


	<resultMap type="Account" id="accountRoughResult">
		<id property="id" column="id" />
		<result property="userId" column="userId" />
		<result property="parkingLotId" column="parkingLotId" />
		<result property="parkingPositionId" column="parkingPositionId" />
		<result property="cardId" column="cardId" />
		<result property="state" column="state"
			typeHandler="com.park.ssm.entity.type.AccountStateHandler" />
		<result property="isParking" column="isParking" />
		<association property="currentBill" column="currentBillId"
			fetchType="eager" select="com.park.ssm.dao.BillDao.loadBillById" />

		<collection property="bills" column="{accountId=id}"
			ofType="Bill" fetchType="lazy" select="com.park.ssm.dao.BillDao.listBillById"
			autoMapping="true" />
	</resultMap>

	<!-- dao相关sql -->
	<sql id="sqlField">
		id
		,userId
		,parkingLotId
		,parkingPositionId
		,cardId
		
		,state
		,isParking
		,currentBillId
	</sql>


	<select id="loadAccountById" parameterType="long" resultMap="accountRoughResult">
		select
		*
		from Account
		where id=#{_parameter}
	</select>
	<select id="loadAccountByIdForUpdate" parameterType="long"
		resultMap="accountRoughResult">
		select
		*
		from Account
		where id=#{_parameter}
		for update
	</select>

	<!-- 通过不同id组合查找account -->
	<select id="findAccountrById" resultMap="accountRoughResult">
		select
		*
		from Account
		<where>
			<if test="userId != null">
				and userId=#{userId}
			</if>
			<if test="parkingLotId != null">
				and parkingLotId=#{parkingLotId}
			</if>
			<if test="parkingPositionId != null">
				and parkingPositionId=#{parkingPositionId}
			</if>
			<if test="cardId != null">
				and cardId=#{cardId}
			</if>
		</where>
		<if test="pageNum != null and pageSize != null">
			limit ${(pageNum-1)*pageSize},#{pageSize}
		</if>
	</select>
	<select id="countAccountrById" resultType="Integer">
		select
			count(1)
		from Account
		<where>
			<if test="userId != null">
				and userId=#{userId}
			</if>
			<if test="parkingLotId != null">
				and parkingLotId=#{parkingLotId}
			</if>
			<if test="parkingPositionId != null">
				and parkingPositionId=#{parkingPositionId}
			</if>
			<if test="cardId != null">
				and cardId=#{cardId}
			</if>
		</where>
	</select>

	<select id="isNotExistCard" parameterType="long" resultMap="accountRoughResult">
		select
		*
		from Account
		where cardId=#{_paramter}
	</select>

	<!-- 添加新卡，通过数据库调用存储过程实现 -->
	<select id="addNewCard"  statementType="CALLABLE" useCache="false">
		call addNewCard(
			#{cardId}
			,#{userId}
			,#{parkingLotId}
			,#{accountId,mode=OUT,jdbcType=BIGINT,javaType=Long}
			,#{flag,mode=OUT,jdbcType=INTEGER,javaType=Integer}
		);
	</select>

	<update id="setAccountState">
		update Account
		set state=${state.getInd()}
		where id=#{id}
	</update>

	<update id="modifyAccount" parameterType="Map" >
		update Account
		set
		<foreach collection="map" index="key" item="value" separator=",">
			<choose>
				<when test="key.equals(&quot;state&quot;)">
					${key}=#{value.ind},stateStartDate=curdate()
				</when>
				<otherwise>
					${key}=#{value}
				</otherwise>
			</choose>
		</foreach>
		where id=#{id}
	</update>
    
    <update id="updateCardStatus">
    update Account 
    set state=${state.getInd()},cardId=Null
    where cardId=#{cardId}
    </update>

<select id="getCardMessage" resultMap="accountRoughResult">
	select 
		*
	from Account
	where cardId=#{_paramter}
	for update
</select>

<select id="getAccountNum" resultType="Integer" >
	select 
		count(id)
	from Account
	where userId=#{_paramter}
</select>


<select id="parkCar" statementType="CALLABLE" useCache="false" >
	call parkCar(
		#{accountId}
		,#{flag,mode=OUT,jdbcType=INTEGER,javaType=Integer}	
	)
</select>

<select id="pickCar" statementType="CALLABLE" useCache="false">
	call pickCar(
		#{accountId}
		,#{flag,mode=OUT,jdbcType=INTEGER,javaType=Integer}	
	)
</select>

</mapper>