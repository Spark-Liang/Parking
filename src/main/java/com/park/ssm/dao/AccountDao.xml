<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--客户映射 指定到dao接口 -->
<mapper namespace="com.park.ssm.dao.AccountDao">


	<resultMap type="Account" id="accountRoughResult">
		<id property="id" column="id" />
		<result property="userId" column="userId" />
		<result property="parkingPositionId" column="parkingPositionId" />
		<result property="cardId" column="cardId" />
		
		<result property="price" column="price"/>
		<result property="state" column="state"
			typeHandler="com.park.ssm.entity.type.AccountStateHandler" />
		<result property="isParking" column="isParking" />
		
		<association property="parkingLot" column="parkingLotId"
			javaType="ParkingLot" fetchType="eager"
			select="com.park.ssm.dao.ParkingLotDao.loadParkingLotById"
			autoMapping="true" />
		<collection property="currentBill" ofType="Bill" javaType="List">
			<id property="id" column="billId"/>
	
			<result property="userId" column="bill_userId" />
			<result property="parkingLotId" column="bill_parkingLotId" />
			<result property="accountId" column="bill_accountId" />
	
			<result property="price" column="billPrice" />
			<result property="isPaid" column="isPaid" />
			<result property="lastPayDate" column="lastPayDate" />
	
			<collection property="timeQuantums" javaType="List" ofType="TimeQuantum">
				<result property="startTime" column="startTime" />
				<result property="endTime" column="endTime" />
			</collection>
		</collection>
		<collection property="bills" column="{accountId=id}"
			ofType="Bill" fetchType="lazy" select="com.park.ssm.dao.BillDao.listBillById"
			autoMapping="true" />
		
	</resultMap>

	<!-- dao相关sql -->
	<sql id="accountField">
		userId
		,parkingLotId
		,parkingPositionId
		,cardId
		
		,price
		,state
		,isParking
	</sql>


	<select id="loadAccountById" parameterType="long" resultMap="accountRoughResult">
		select
			a.id id
			,a.userId userId
			,a.parkingLotId parkingLotId
			,parkingPositionId,cardId
			,a.price price
			,a.state state
			,isParking
			,c.id billId
			,c.userId bill_userId
			,c.parkingLotId bill_parkingLotId
			,c.accountId bill_accountId
			,c.price billPrice
			,isPaid,lastPayDate
			,startTime,endTime
		from
		(select * 
		from Account 
		where id=#{_parameter}
		)a
		left join
		currentBillMap b
		on a.id=b.accountId
		left join
		Bill c
		on b.currentBillId=c.id
		left join
		AccountStateLog d
		on c.id=d.billId
	</select>
	<select id="loadAccountByIdForUpdate" parameterType="long"
		resultMap="accountRoughResult">
		select
			a.id id
			,a.userId userId
			,a.parkingLotId parkingLotId
			,parkingPositionId,cardId
			,a.price price
			,a.state state
			,isParking
			,c.id billId
			,c.userId bill_userId
			,c.parkingLotId bill_parkingLotId
			,c.accountId bill_accountId
			,c.price billPrice
			,isPaid,lastPayDate
			,startTime,endTime
		from
		(select *
		from Account 
		where id=#{_parameter}
		)a
		left join
		currentBillMap b
		on a.id=b.accountId
		left join
		Bill c
		on b.currentBillId=c.id
		left join
		AccountStateLog d
		on c.id=d.billId
		for update
	</select>

	<!-- 通过不同id组合查找account -->
	<select id="findAccountrById" resultMap="accountRoughResult">
		select
			a.id id
			,a.userId userId
			,a.parkingLotId parkingLotId
			,parkingPositionId,cardId
			,a.price price
			,a.state state
			,isParking
			,c.id billId
			,c.userId bill_userId
			,c.parkingLotId bill_parkingLotId
			,c.accountId bill_accountId
			,c.price billPrice
			,isPaid,lastPayDate
			,startTime,endTime
		from 
		(select *
		from Account
			<where>
				<if test="userId != null">
					and userId=#{userId}
				</if>
				<if test="parkingLotId != null">
					and parkingLotId=#{parkingLotId}
				</if>
				<if test="parkingPositionId != null">
					and parkingPositionId=#{parkingPositionId}
				</if>
				<if test="cardId != null">
					and cardId=#{cardId}
				</if>
			</where>
			<if test="pageNum != null and pageSize != null">
				limit ${(pageNum-1)*pageSize},#{pageSize}
			</if>
		)a
		left join
		currentBillMap b
		on a.id=b.accountId
		left join
		Bill c
		on b.currentBillId=c.id
		left join
		AccountStateLog d
		on c.id=d.billId
	</select>
	<select id="countAccountrById" resultType="Integer">
		select
		count(1)
		from Account
		<where>
			<if test="userId != null">
				and userId=#{userId}
			</if>
			<if test="parkingLotId != null">
				and parkingLotId=#{parkingLotId}
			</if>
			<if test="parkingPositionId != null">
				and parkingPositionId=#{parkingPositionId}
			</if>
			<if test="cardId != null">
				and cardId=#{cardId}
			</if>
		</where>
	</select>

	<select id="isNotExistCard" parameterType="long" resultMap="accountRoughResult">
		select
			a.id id
			,a.userId userId
			,a.parkingLotId parkingLotId
			,parkingPositionId,cardId
			,a.price price
			,a.state state
			,isParking
			,c.id billId
			,c.userId bill_userId
			,c.parkingLotId bill_parkingLotId
			,c.accountId bill_accountId
			,c.price billPrice
			,isPaid,lastPayDate
			,startTime,endTime
		from 
		(select *
		from Account
		where cardId=#{_paramter}
		)a
		left join
		currentBillMap b
		on a.id=b.accountId
		left join
		Bill c
		on b.currentBillId=c.id
		left join
		AccountStateLog d
		on c.id=d.billId
	</select>

	<!-- 添加新卡，通过数据库调用存储过程实现 -->
	<select id="addNewCard" statementType="CALLABLE" useCache="false">
		<![CDATA[{
			call
			addNewCard(
			 #{cardId}
			,#{userId}
			,#{parkingLotId}
			,#{accountId,mode=OUT,jdbcType=BIGINT,javaType=java.lang.Long}
			,#{flag,mode=OUT,jdbcType=INTEGER,javaType=Integer}
			)
		}]]>
	</select>
	<!-- 被停卡的账户成功续费之后，更新数据库状态 -->
	<select id="resumeCard" statementType="CALLABLE" useCache="false">
	<![CDATA[{
		call resumeCard(
			#{positionId,mode=IN}
			,#{accountId,mode=IN}
			,#{flag,mode=OUT,jdbcType=INTEGER,javaType=Integer}
		)
	}]]>
	</select>

	<update id="setAccountState">
		update Account
		set state=${state.getInd()}
		where
		id=#{id}
	</update>

	<update id="modifyAccount" parameterType="Map">
		update Account
		set
		<foreach collection="map" index="key" item="value" separator=",">
			<choose>
				<when test="key.equals(&quot;state&quot;)">
					${key}=#{value.ind},stateStartDate=curdate()
				</when>
				<otherwise>
					${key}=#{value}
				</otherwise>
			</choose>
		</foreach>
		where id=#{id}
	</update>

	<update id="updateCardStatus">
		update Account
		set state=${state.getInd()},cardId=Null
		where cardId=#{cardId}
	</update>

	<select id="getCardMessage" resultMap="accountRoughResult">
		select
			a.id id
			,a.userId userId
			,a.parkingLotId parkingLotId
			,parkingPositionId,cardId
			,a.price price
			,a.state state
			,isParking
			,c.id billId
			,c.userId bill_userId
			,c.parkingLotId bill_parkingLotId
			,c.accountId bill_accountId
			,c.price billPrice
			,isPaid,lastPayDate
			,startTime,endTime
		from 
		(select *
		from Account
		where cardId=#{_paramter}
		)a
		left join
		currentBillMap b
		on a.id=b.accountId
		left join
		Bill c
		on b.currentBillId=c.id
		left join
		AccountStateLog d
		on c.id=d.billId
	</select>

	<select id="getAccountNum" resultType="Integer">
		select
		count(id)
		from Account
		where userId=#{_paramter}
	</select>


	<select id="parkCar" statementType="CALLABLE" useCache="false">
		<![CDATA[{
			call parkCar(
			#{accountId}
			,#{flag,mode=OUT,jdbcType=INTEGER,javaType=Integer}
			)
		}]]>
	</select>

	<select id="pickCar" statementType="CALLABLE" useCache="false">
		<![CDATA[{
			call pickCar(
			#{accountId}
			,#{flag,mode=OUT,jdbcType=INTEGER,javaType=Integer}
			)
		}]]>
	</select>
<!-- 
	<update id="updateCurrentBillId">
		update Account set currentBillId=null
		<where>
			currentBillId=#{currentBill}
			and
			id=#{id}
		</where>
	</update> -->
	

		<select id="updateAllAccountState" statementType="CALLABLE" useCache="false">
		<![CDATA[{
			call updateAllAccountState(
			    #{date}
			,#{flag,mode=OUT,jdbcType=INTEGER,javaType=Integer}
			)
		}]]>
	</select>
</mapper>